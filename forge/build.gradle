plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
}

minecraft {
    mappings channel: 'official', version: minecraft_version

    if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
        // This location is hardcoded in Forge and can not be changed.
        // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        project.logger.debug('Forge Access Transformers are enabled for this project.')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.4.1")) {
        jarJar.ranged(it, "[0.4.1,)")
    }

    compileOnly project(":common")
    compileOnly(annotationProcessor('com.google.auto.service:auto-service:1.1.1'))
    compileOnly(fg.deobf("software.bernie.geckolib:geckolib-forge-1.18:3.0.57"))
}

mixin {
    add sourceSets.main, "mixins.${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

tasks.withType(JavaCompile) {
    source(project(":common").sourceSets.main.allSource)
}

def properties = [
        minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
        loader_version   : forge_loader_version_range, forge_version_range: forge_version_range,
        mod_id           : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
        mod_author       : mod_author, mod_description: mod_description
]
processResources {
    from project(":common").sourceSets.main.resources
    for (final def property in properties) {
        inputs.property(property.getKey(), property.getValue())
    }

    filesMatching(["META-INF/mods.toml", "pack.mcmeta"]) {
        expand(properties)
    }
}

javadoc {
    /*classpath = project.sourceSets.main.compileClasspath.filter{
        if (it.name.contains("gecko")) {
            return false;
        }
        return true;
    }*/
    source project(":common").sourceSets.main.allJava
    source project.sourceSets.main.allJava
    exclude("**/mixin/**")
    options.addBooleanOption('-ignore-source-errors', true)
}

jar {
    setArchiveClassifier('slim')
}
tasks.jarJar {
    setArchiveClassifier('')
}

jar.finalizedBy('reobfJar')
tasks.jarJar.finalizedBy('reobfJarJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId "${archives_name}-${project.name}-${minecraft_version}"
            version version
            artifact tasks.jarJar
            from components.java
            pom.withXml {
                asNode().dependencies.dependency.each { dep ->
                    if(dep.artifactId.last().value().last() in ["forge", "mixinextras-forge"]) {
                        assert dep.parent().remove(dep)
                    }
                }
            }
        }
    }

    repositories {
        if (project.hasProperty("cloudsmith_username") && project.hasProperty("cloudsmith_token")) {
            maven {
                name = "Cloudsmith"
                url = "https://maven.cloudsmith.io/darkpred-mods/more-hitboxes/"
                credentials {
                    username = project.property("cloudsmith_username")
                    password = project.property("cloudsmith_token")
                }
            }
        } else {
            mavenLocal()
        }
    }
}
