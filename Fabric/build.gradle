import net.fabricmc.loom.api.mappings.layered.MappingContext
import net.fabricmc.loom.api.mappings.layered.MappingLayer
import net.fabricmc.loom.api.mappings.layered.MappingsNamespace
import net.fabricmc.loom.api.mappings.layered.spec.MappingsSpec
import net.fabricmc.loom.configuration.providers.mappings.intermediary.IntermediaryMappingLayer
import net.fabricmc.mappingio.MappingVisitor
import net.fabricmc.mappingio.tree.MappingTreeView
import net.fabricmc.mappingio.tree.MemoryMappingTree

plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id 'maven-publish'
    id 'idea'
}

version = mod_version
group = maven_group


dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings(loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-1.18.2:$parchment_date@zip")
        addLayer(new FixGeckoLibSpec())
    })
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"

    compileOnly project(":Common")
    compileOnly(annotationProcessor('com.google.auto.service:auto-service:1.1.1'))
    modCompileOnly("software.bernie.geckolib:geckolib-fabric-1.18:3.0.80")
}

loom {
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
    accessWidenerPath = file("src/main/resources/${mod_id}.accesswidener")
}

def properties = [
        minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
        loader_version   : fabric_loader_version,
        mod_id           : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
        mod_author       : mod_author, mod_description: mod_description
]
processResources {
    from project(":Common").sourceSets.main.resources
    for (final def property in properties) {
        inputs.property(property.getKey(), property.getValue())
    }

    filesMatching(["fabric.mod.json"]) {
        expand(properties)
    }
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}
javadoc {
    source project(":Common").sourceSets.main.allJava
    source project.sourceSets.main.allJava
    exclude("**/mixin/**")
    options.addBooleanOption('-ignore-source-errors', true)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId "${archives_name}-${project.name.toLowerCase()}"
            version "${minecraft_version}-${version}"
            from components.java
        }
    }

    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

class FixGeckoLibSpec implements MappingsSpec<FixGeckoLibLayer> {

    @Override
    FixGeckoLibLayer createLayer(MappingContext context) {
        return new FixGeckoLibLayer()
    }

    @Override
    int hashCode() {
        return "FixGeckoLibLayer".hashCode()
    }
}

class FixGeckoLibLayer implements MappingLayer {
    private final Map METHOD_NAME_MAP = Map.of("getTextureLocation", "_getTextureLocation");

    @Override
    void visit(MappingVisitor mappingVisitor) throws IOException {
        MemoryMappingTree memoryMappingTree = (MemoryMappingTree) mappingVisitor
        var getClasses = MappingTreeView.getDeclaredMethod("getClasses")
        var getMethods = MappingTreeView.ClassMappingView.getDeclaredMethod("getMethods")
        var getName = MappingTreeView.ElementMappingView.getDeclaredMethod("getName", String.class)
        var entryClass = Class.forName("net.fabricmc.mappingio.tree.MemoryMappingTree\$Entry")
        var srcNameField = entryClass.getDeclaredField("srcName")
        srcNameField.setAccessible(true)
        for (final def classEntry in getClasses.invoke(memoryMappingTree)) {
            for (final def methodEntry in getMethods.invoke(classEntry)) {
                var it = METHOD_NAME_MAP.get(getName.invoke(methodEntry, MappingsNamespace.NAMED.toString()))
                if (it != null) srcNameField.set(methodEntry, it)
            }
        }
    }

    @Override
    MappingsNamespace getSourceNamespace() {
        return MappingsNamespace.NAMED;
    }

    @Override
    List<Class<? extends MappingLayer>> dependsOn() {
        return List.of(IntermediaryMappingLayer.class)
    }
}
